---
- name: Ensure ArgoCD instance {{ argocd_instance_name }} is present
  hosts: localhost
  become: false
  gather_facts: false

  tasks:
    - name: Ensure namespace {{ argocd_instance_namespace }} is present
      redhat.openshift.k8s:
        name: "{{ argocd_instance_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Ensure ArgoCD instance {{ argocd_instance_name }} is present
      redhat.openshift.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1beta1
          kind: ArgoCD
          metadata:
            name: "{{ argocd_instance_name }}"
            namespace: "{{ argocd_instance_namespace }}"
          spec:
            server:
              route:
                enabled: "{{ argocd_instance_enable_route | default(true) }}"

    - name: Wait for route to be created
      kubernetes.core.k8s_info:
        kind: Route
        name: "{{ argocd_instance_name }}-server"
        namespace: "{{ argocd_instance_namespace }}"
      register: r_route_admission
      until: r_route_admission.resources.0.status.ingress.0.host is defined
      delay: 5
      retries: 60

    - name: Collect secret for admin key
      kubernetes.core.k8s_info:
        kind: Secret
        name: "{{ argocd_instance_name }}-cluster"
        namespace: "{{ argocd_instance_namespace }}"
      register: r_argo_secret

    - name: Print route info
      ansible.builtin.debug:
        var: r_route_admission

    - name: Print secret info
      ansible.builtin.debug:
        var: r_argo_secret

    - name: Set facts
      ansible.builtin.set_fact:
        f_argocd_url: "{{ r_route_admission.resources.0.status.ingress.0.host }}"
        f_argocd_admin_pass: "{{ r_argo_secret.resources.0.data['admin.password'] | b64decode }}"

    - name: ArgoCD Connection Details
      ansible.builtin.debug:
        msg: |
          ArgoCD URL: "{{ f_argocd_url }}"
          ArgoCD Admin Password: "{{ f_argocd_admin_pass }}"
